- @title ||= ti(:title, model: models_label(false))
- content_for(:actions, index_action_link)

- provide :head do
  :css
    .form-control-inline {
      display:block;
      height:34px;
      margin: 8px auto;
    }
    .form-control-inline input {
      width:85%;
      heigth:inherit;
      border: 1px solid #ccc
      border-radius:4px;
      font-size: 14px;
    }
    .form-control-inline button {
      width:15%;
      heigth:inherit;
    }

.row
  .col-sm-12.features-box.wow.fadeInLeft
    .jumbotron
      = simple_form_for(@reservation, method: :post, url: reservations_path) do |f|
        = f.error_notification
        .form-inputs
          .col-md-12.col-sm-12.col-xs-12
            = f.input :total_seats, readonly: true
            = f.input :status, collection: Reservation::STATUSES, include_blank: false
            = f.input :fan_names, as: :remove_array, label: 'Elenco Partecipanti', readonly: true
            %p
              %label Aggiungi partecipante
            %small.text-danger#guest-error
            %small.text-success#guest-success
            .form-inline
              = f.input :fan_last_name, as: :fake, label: false, placeholder: 'Cognome', input_html: { value: current_user.last_name }
              = f.input :fan_first_name, as: :fake, label: false, placeholder: 'Nome', input_html: { value: current_user.first_name }
              %button.btn.btn-primary#add-guest{ type: :button } Aggiungi Partecipante
            = f.input :phone_number
            = f.input :event_id, collection: Event.include_all.order(:date).bookable.upcoming, include_blank: false
            = f.input :user_id, collection: User.order(:email).all, include_blank: false
        .btn-group{ role: :group }
          = f.button :submit, 'Save', class: 'btn-primary'
          = link_to('Back', reservations_path, class: 'btn btn-default')

:javascript
  $(function(){
    initializeAddGuest();
    updateFanNamesLabel();
  })

  function updateFanNamesLabel(){
    var fansCount = $('input[name="reservation[fan_names][]"]').length;
    $("label[for='reservation_fan_names']").text( "Partecipanti Aggiunti: " + fansCount)
  }

  function clearGuestInput(){
    $('input#fan_last_name').val('');
    $('input#fan_first_name').val('');
  }

  function initializeAddGuest(){
    var inputSelector = 'input[name="reservation[fan_names][]"]';
    var removeButton = $('.remove_fan_names_button');
    var wrapper = $('.reservation_fan_names');

    var addButton = $('#add-guest');
    var removeButtonHtml = '<button type="button" class="remove_fan_names_button btn btn-default"><i class="fa fa-trash-o" aria-hidden="true"></i></button>';

    var emptyInput = '<div class="form-control-inline"><input class="text optional readonly" readonly="readonly" name="reservation[fan_names][]" type="text"></div>';

    var min_field_size  = 6;
    var max_fields      = 100;

    var x = $(inputSelector).length; //initial text box count

    function guestErrorMsg(msg){
      $('#guest-error').text(msg);
    }

    function guestSuccessMsg(msg){
      $('#guest-success').text(msg);
    }

    function existingGuests(){
      var guests = [];
      $('input[name="reservation[fan_names][]"]').map(function(){ guests.push($(this).val()) });
      return guests;
    }

    function extractGuestName(){
      var guestLastName = $.trim($('input#fan_last_name').val());
      var guestFirstName = $.trim($('input#fan_first_name').val());

      if (guestLastName.length < 1) {
        guestErrorMsg("Per favore indica il Cognome del partecipante");
        return false;
      }
      else if (guestFirstName.length < 1) {
        guestErrorMsg("Per favore indica il Nome del partecipante");
        return false;
      }
      else if((guestLastName + guestFirstName).length < min_field_size){
        guestErrorMsg("Il nome di un partecipante deve essere almeno " + min_field_size + " caratteri");
        return false;
      } else {
        return guestLastName + ' | ' + guestFirstName;
      };
    }

    $(addButton).click(function(e){ //on add input button click
        resetGuestMsg();
        if(x < max_fields){ //max input box allowed
          var guestName = extractGuestName();
          if (guestName) {
            var guests = existingGuests();
            if ($.inArray(guestName, guests) < 0){
              x++; //text box increment
              $(emptyInput).appendTo(wrapper).append(removeButtonHtml);
              $(inputSelector).last().val(guestName);
              clearGuestInput();
              updateFanNamesLabel();
              guestSuccessMsg(guestName + " è stato aggiunto all'elenco dei partecipanti");
            } else {
              guestErrorMsg(guestName + " è già presente nell'elenco dei partecipanti");
              clearGuestInput();
            }
          }
        } else {
          guestErrorMsg(
            "Hai raggiunto il limite massimo di partecipanti iscrivibili a questa trasferta (" +
            max_fields + ")"
           );
        }
        return;
    });

    $(wrapper).on('click', '.remove_fan_names_button',function(){ //user click on remove text
        $(this).parent('.form-control-inline').remove();
        x--;
        updateFanNamesLabel();
    });

    function resetGuestMsg(){
      guestErrorMsg('');
      guestSuccessMsg('');
    }
  }
